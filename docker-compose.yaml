version: "3.7"

services:
  vehicle-detection-api:
    container_name: "vehicle-detection-api"
    build: ./splot_vehicle-detection
    restart: always
    ports:
      - 8000:8000
    volumes:
      - ${HOST_IMAGES_PATH}:/root/app/images
    env_file:
      - ./config/vehicle-detection.env

  backend-db:
    container_name: "backend-db"
    build: ./splot_backend-db
    restart: always
    depends_on:
      - db
    ports:
      - 5000:5000
    depends_on:
      - db
    volumes:
      - ${HOST_IMAGES_PATH}:/usr/src/app/tmp-images
      - ./.db-images:/usr/src/app/db-images
      - ./.ui-images:/usr/src/app/ui-images
    env_file:
      - ./config/backend-db.env
    entrypoint: "sh"
    command: ./scripts/wait-for-postgres.sh


  db:
    container_name: "db"
    image: postgres:13-alpine
    restart: always
    ports:
      - 5432:5432
    volumes:
      - ./.db-data:/var/lib/postgresql/data
    env_file:
      - ./config/db.env

  broker:
    container_name: "mosquitto-broker"
    image: eclipse-mosquitto:2.0.11
    restart: always
    volumes:
      - ./config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./logs/mosquitto.log:/mosquitto/log/mosquitto.log
    ports:
      - 1883:1883

  mqtt_microservice:
    container_name: "mqtt-microservice"
    build: ./mqtt_microservice
    restart: always
    environment:
      MQTT_URL: mqtt://broker:1883
      MQTT_TOPIC: proximity_sensor
      TOPIC_SPOTLIGHT: spotlight
      TOPIC_TRAFFIC_LIGHT: traffic_light
      TOPIC_PROXIMITY: proximity_sensor
    depends_on:
      - broker
    volumes:
      - ./mqtt_microservice/mqtt_bridge.js:/usr/src/mqtt_bridge.js
      - ./mqtt_microservice/http-functions.js:/usr/src/http-functions.js
      - ./mqtt_microservice/mqtt-functions.js:/usr/src/mqtt-functions.js
    ports:
      - 3001:3001
    command: npx nodemon -L mqtt_bridge.js

  backend-photo:
    container_name: "backend-photo"
    build: ./splot_backend
    restart: always
    depends_on:
      - backend-db
    volumes:
      - ./images:/usr/src/images
      - ./splot_backend/index.js:/usr/src/index.js
      - ./config/cameras-ip.json:/usr/src/config/cameras-ip.json
    ports:
      - 3000:3000
    command: npx nodemon -L index.js

  crontab-backup:
    container_name: "crontab-backup"
    build: ./splot_crontab-backup
    restart: always
    volumes:
      - ./.db-data:/usr/src/db-data
      - ./.db-images:/usr/src/db-images
      - ./db-backup:/usr/src/db-backup

  frontend:
    container_name: "splot-frontend"
    build: ./SPloT_frontend
    restart: always
    ports:
      - 8080:8080
    command: http-server -p 8080

  entry-display:
    container_name: "entry-display"
    build: ./splot_entry-display
    restart: always
    ports:
      - 8081:8081
    command: http-server -p 8081